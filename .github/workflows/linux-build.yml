# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Linux-building

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
      - 'README_zh.md'
      - 'LICENSE'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
      - 'README_zh.md'
      - 'LICENSE'

jobs:
  linux-build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, ubuntu-20.04]
        qt_version: [5.15.2]
        build_type: [Release]
        cpp_compiler: [g++, clang++]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-20.04
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-20.04
            c_compiler: clang
            cpp_compiler: clang++
        # exclude:
        #   - os: windows-latest
        #     c_compiler: gcc
        #   - os: windows-latest
        #     c_compiler: clang
        #   - os: ubuntu-latest
        #     c_compiler: cl

    steps:
      - name: Checkout Source code
        uses: actions/checkout@v4
        with:
          submodules: true
          
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v3
        with:
          # github.workspace: /home/runner/work/QClipboard/QClipboard/
          path: ${{ github.workspace }}/Qt
          key: ${{ runner.os }}-QtCache

      - name: Install Qt
        if: steps.cache-qt.outputs.cache-hit != 'true'
        uses: jurplel/install-qt-action@v3
        with:
          # default is 5.15.2
          version: ${{ matrix.qt_version }}
          # default path: /home/runner/work/QClipboard/Qt/5.15.2/
          # change default path to /home/runner/work/QClipboard/QClipboard/Qt/
          dir: "${{ github.workspace }}"

        # Only the Qt file is cached, but the environment can not be set automatically
      - name: Set Qt environment variables
        run: |
            echo 'export QTDIR=${{ github.workspace }}/Qt/${{ matrix.qt_version }}/gcc_64' >> $GITHUB_ENV
            echo 'export PATH=$PATH:=$QTDIR/bin' >> $GITHUB_ENV
            echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:=$QTDIR/lib' >> $GITHUB_ENV

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. 
        # `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{github.workspace}}/build
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Build
        # Build your program with the given configuration. 
        # Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{github.workspace}}/build --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration. 
        # Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}
